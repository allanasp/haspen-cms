name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          extensions: pdo, pdo_pgsql, redis, bcmath, zip
          coverage: xdebug
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run PHP CS Fixer (dry-run)
        run: ./vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.php --dry-run --diff --verbose

      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse --memory-limit=1G --no-progress

      - name: Run Psalm
        run: ./vendor/bin/psalm --no-cache --show-info=false --output-format=github

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.3
          tools: composer:v2

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run security audit
        run: composer audit --no-dev

  # Unit and Feature Tests
  tests:
    name: Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php: [8.3]
        include:
          - php: 8.3
            coverage: true

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: headless_cms_test
          POSTGRES_USER: headless_cms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: pdo, pdo_pgsql, redis, bcmath, zip
          coverage: ${{ matrix.coverage && 'xdebug' || 'none' }}
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Setup test environment
        run: |
          cp .env.testing.example .env.testing
          php artisan key:generate --env=testing
        env:
          DB_CONNECTION: pgsql
          DB_HOST: localhost
          DB_PORT: 5432
          DB_DATABASE: headless_cms_test
          DB_USERNAME: headless_cms
          DB_PASSWORD: secret
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run database migrations
        run: php artisan migrate --env=testing --force

      - name: Run tests
        run: |
          if [ "${{ matrix.coverage }}" == "true" ]; then
            php artisan test --coverage-clover=coverage.xml
          else
            php artisan test --parallel
          fi

      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Build and Test Docker Image
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [code-quality, security, tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: false
          tags: headless-cms:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm --name test-container -d \
            -e APP_ENV=testing \
            -e APP_KEY=base64:test \
            -e DB_CONNECTION=sqlite \
            -e DB_DATABASE=:memory: \
            headless-cms:latest
          
          # Wait for container to be ready
          sleep 10
          
          # Check if container is running
          docker ps | grep test-container
          
          # Stop container
          docker stop test-container

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, security, tests, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
          echo "This is a placeholder for actual deployment logic"
        # Add your deployment logic here
        # Examples:
        # - Deploy to cloud providers (AWS, GCP, Azure)
        # - Update Kubernetes deployments
        # - Trigger deployment webhooks
        # - Update container registries

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [code-quality, security, tests, docker]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.code-quality.result == 'success' && needs.security.result == 'success' && needs.tests.result == 'success' && needs.docker.result == 'success'
        run: echo "✅ All checks passed!"

      - name: Notify on failure
        if: needs.code-quality.result == 'failure' || needs.security.result == 'failure' || needs.tests.result == 'failure' || needs.docker.result == 'failure'
        run: echo "❌ Some checks failed!"